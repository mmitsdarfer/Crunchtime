The what:
- A program that scrapes the scores of multiple sports games and gives the link to the closest score. If multiple with same score delta, closest to the end of game or highest in standings
- It refreshes the scores every [set time period] but when you click "It's a commercial!" it refreshes and takes you to the next game

known errors:
-when cookies don't exist they can only be creatd on home page & /preferences, but /preferences doesn't populate dropdowns
   until refreshing
-still get:
   "if((time[2].includes('OT')))
                  ^
   TypeError: Cannot read properties of undefined (reading 'includes') "
         I think this is when period or quarter is shown without "End of" (eg "3rd" on its own)
            Use NaN and length so if it's just 3rd (for example) vs 3:01 - 3rd I can differentiate (?)
- 'hidden.json' created randomly and/or when all jsons are first made
   - Need to use async to make sure I get league from preferences.json at top of scrape.js
- rapidly refreshing (before puppeteer can finish scraping) creates duplicates of all the game data
   - Maybe add some timeout like with getCookies() in server.js
- when some games have channel links and others don't the columns become misaligned
   - I think they all have chananels (except NBA which has none), so this shouldn't be an issue
      - Starting to see channels for NBA sometimes

To do:
- Make json for each kind of priority? Probably not but still have to Figure out delay
- I have diffsWithTimes in scrape.js but probably should be more flexible to incorporate standings
- See what happens when cookies don't yet exist
- (do if any new links show up) Add streaming/other online links for non-NHL sports
- Scrape each league from the home page so at least some data is ready for when that page opens?
   - Use the preferences json to just scrape top league? Or in order from most visited to least?
   - Have to make sure it's sequential because overlap messes up the data
- Add timer to auto refresh 
   - Run scrape in the background on its own and have refresh just implement those scraped values
      - Do I want to refresh the page (and in turn data) without clicking refresh?
 - Add team logos
 - (Evergreen) Document code and get rid of unneeded parts
 - implement standings variable 
   - Maybe the average of both team's overall standing position (eg 2nd place vs 4th place [3] prioritized over 1st vs 6th [3.5])
   - !! Score page I scrape from (espn.com/[LEAGUE/scoreboard]) has team records so I could average and mergesort these
      - Can either just do wins + ties - losses or program in leagues' point systems
   - Use standings to sort unstarted games if that's top priority
- Check out bootstrap for cleaner UI
   - At least change fonts
      - Make dropdown same as everything else?
   - Use platform computing notes for a guide
   - https://bootstrapshuffle.com/classes
- Sometimes NBA does have channels, so check for channel instead of a whole league either having them or not
- Make nested for loops consistent; most go i then j, so make them all do that (for readability and consistency)
- Display current preference in league pages?
   - Leaning towards no
- Host on netlify?
- Pie in the sky/longterm:   
   - Try to scrape ESPN+ links so it actually goes to the game, not just to  ESPN+
      - Add option to automatically follow link to closest game (in new tab)
      - Add to switch to preferences
   - Combine multiple sports 
      - Would need diffs to be to scale because 3 pt football game != 3 goal hockey game
      - Or could show the 1st of each sport, then the 2nd, and so on
   - Some people preach against for loops so maybe try forEach, map, and/or filter
      - Idk if it's actually not great to use and this is a small dataset so probs not worth it

League page setup
Header: "[League] Games"
Logo image
Date
"Closest Game(s)"
   Each game format:
   Team 1   Score
   Team 2   Score
   Time left   Link

To do but this time it's specific:
1. 
2. Ensure different priority orders work and work together
- Maybe just make them more flexible so order matter less
3. Figure out how to update scores when they load

WIWWO: 
2/24: got top 2 priorities working. need 3rd to work
nba still has some empty arrays
2/23: sorting by standRank works, but standRank isn't correct
First 2 priorities work (perfectly), but 3rd might need to be completely rewritten. This is for finalSort btw
      -> working on final sort. the nested loops are leading to repeated (x10) instances but the final answer seems to be right for 1st 2 prefs
      -> need to get rid of empty arrays
   MLB not working
2/22: sorting by standings clears preferences.json then kills the program
         -> I think this is just because the old sorts only had functions that use toJson for diffs and times and I had to clear out standings
old sorts show only 1 game multiple times if score and time are both same
Just finished newTimeSort, need to work on newDiffSort and newStandingSort too I guess
2/20: Working on new-standings branch
      -> Trying to find way to update gameData even though standingsScrape is async
      -> Could have each priority write to json since I can't return out of async standingsScrape
         and have the other priorities read the json
      -> Create standings json and use that then update it later?
2/8: Wanna use how preferences.html is updated with zeros to show scores as they load. Might be tricky
since I can't use require
   -> This method might not be possible because idk how I'd trigger the update from the html
      -> Refresh button gets the scores but still has to wait
   -> What about updating a cookie after scrape is done and have html constantly checking for that cookie?
      -> Wouldn't want scores to be on cookie tho. Too much info and formatting concerns
      -> But if a scoresUpdated cookie exists, how would it get scores?
1/30: when json doesn't exist an error is given while json is made -> make json before showing this error
         use fs.existsSync for each league?


Using git:
1. Make changes to code
2. Commit
3. Branch -> merge
4. Compare and confirm merge/pull

Optimized priorities:
gameData = [];
gameData[i] = push sorted by priority0
if(gameData[i].length > 1) gameData[i][j] = sorted by priority1
if(gameData[i][j] .length > 1) gameData[i][j][k] = sorted by priority2

Get data for all priorities before doing any sorting?
Or create game object with all game data plus where it ranks for each priority
   Could scrape and have all priorities set up so I can display them when changing priorities while scraping happens in background

game 1 team1, team2, ... [diff, diffRank], [time, timeRank], [standings, standingsRank]
Replace 'data' with 'gameData'
|__




[  0
  [], 0.0
  [   0.1
    {
      team1: 'Maple Leafs',
      score1: '0',
      team2: 'Golden Knights',
      score2: '0',
      progress: 'ongoing',
      time: '123',
      network: 'NHLPP|ESPN+',
      link: 'https://www.espn.com/watch/',
      diff: 0,
      avgStanding: 8.5,
      timeRank: 3,
      diffRank: 1,
      standRank: 0
    },
    {
      team1: 'Canucks',
      score1: '0',
      team2: 'Kraken',
      score2: '0',
      progress: 'ongoing',
      time: '76',
      network: 'NHLPP|ESPN+',
      link: 'https://www.espn.com/watch/',
      diff: 0,
      avgStanding: 11,
      timeRank: 0,
      diffRank: 1,
      standRank: 1
    }
  ],
  [
    {
      team1: 'Bruins',
      score1: '1',
      team2: 'Flames',
      score2: '2',
      progress: 'ongoing',
      time: '1512',
      network: 'NHLPP|ESPN+',
      link: 'https://www.espn.com/watch/',
      diff: 1,
      avgStanding: 12.5,
      timeRank: 2,
      diffRank: 2,
      standRank: 2
    }
  ],
  [
    {
      team1: 'Islanders',
      score1: '0',
      team2: 'Blues',
      score2: '3',
      progress: 'ongoing',
      time: '2948',
      network: 'NHLPP|ESPN+',
      link: 'https://www.espn.com/watch/',
      diff: 3,
      avgStanding: 16,
      timeRank: 1,
      diffRank: 3,
      standRank: 3
    }
  ],
  [],
  [],
  [],
  [],
  [],
  [
    {
      team1: 'Predators',
      score1: '-',
      team2: 'Kings',
      score2: '-',
      progress: 'unstarted',
      time: '10:30 PM',
      network: 'ESPN+',
      link: 'https://www.espn.com/watch/',
      diff: 100,
      avgStanding: 15.5,
      timeRank: 10,
      diffRank: 9,
      standRank: 4
    },
    {
      team1: 'Stars',
      score1: '1',
      team2: 'Senators',
      score2: '4',
      progress: 'ended',
      time: 'Final',
      network: undefined,
      link: undefined,
      diff: 3,
      avgStanding: 15,
      timeRank: 11,
      diffRank: 9,
      standRank: 9
    },
    {
      team1: 'Avalanche',
      score1: '1',
      team2: 'Red Wings',
      score2: '2',
      progress: 'ended',
      time: 'Final/OT',
      network: undefined,
      link: undefined,
      diff: 1,
      avgStanding: 9,
      timeRank: 11,
      diffRank: 9,
      standRank: 6
    },
    {
      team1: 'Capitals',
      score1: '5',
      team2: 'Lightning',
      score2: '3',
      progress: 'ended',
      time: 'Final',
      network: undefined,
      link: undefined,
      diff: 2,
      avgStanding: 15,
      timeRank: 11,
      diffRank: 9,
      standRank: 9
    },
    {
      team1: 'Rangers',
      score1: '5',
      team2: 'Devils',
      score2: '1',
      progress: 'ended',
      time: 'Final',
      network: undefined,
      link: undefined,
      diff: 4,
      avgStanding: 9.5,
      timeRank: 11,
      diffRank: 9,
      standRank: 7
    },
    {
      team1: 'Canadiens',
      score1: '1',
      team2: 'Penguins',
      score2: '4',
      progress: 'ended',
      time: 'Final',
      network: undefined,
      link: undefined,
      diff: 3,
      avgStanding: 22.5,
      timeRank: 11,
      diffRank: 9,
      standRank: 10
    }
  ],
  [],
  []
]