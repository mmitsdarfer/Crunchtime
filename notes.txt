The what (my original idea):
- A program that scrapes the scores of multiple sports games and gives the link to the closest score. If multiple with same score delta, closest to the end of game or highest in standings
- It refreshes the scores every [set time period] but when you click "It's a commercial!" it refreshes and takes you to the next game

known errors:
1 clicking logo fails to fetch sometimes
   - just occasionally really slow
      - every time I try to fix this it stops happening or at least isn't as slow as before 
         - this is because opening devtools changes how it loads
   - curious if this happens on my desktop...could be a RAM thing (?)
2 double db entries sometimes created
   - seems to be first entry of a new date
3 reset back to getting stuck on true
4 auto-refresh choice changes back to manual on its own

To do:
0 add peacock support
1 make sure all database info is formatted the same to fit League.js (may need to check during games)
1 Fetch POST instead of cookies (?)
2 See if timezones matter for mongodb vs new Date
3 instead of delete and create in database.js, figure out update
4 tell user if on espn or espn+
5 Make sure need to configure new IP when changing location only for server, not potential users
6 fix unexpected token timer on manual not valid json on league pages
7 switch to sql
   - map out schema
8 see what "Note that the development build is not optimized. [CLIENT] To create a production build, use npm run build." means
9 can I consolidate/get rid of multiple package.json's?
10 move update/load/etc db to their own file?
11 server.js just calls the scrapes when League.js fetches it, so I tried to find a way to do this w/o having a server,
   but haven't been able to figure it out
12 change auto refresh options? 30/60/300 feels like it lacks a good middle option to me
(Evergreen) Document code and check for unneeded parts
(Evergreen) See if specific errors above still exist
(Evergreen) Update readme
(Evergreen/do if any new links show up) Add streaming/other online links
- Pie in the sky/longterm:   
   - Add upcoming days
   - Combine multiple sports 
      - Would need diffs to be to scale because 3 pt football game != 3 goal hockey game
      - Or could show the 1st of each sport, then the 2nd of each, and so on
   - Add favorite teams(?)
      - Might make sense to wait until adding multiple sports combined
   - Don't re-scrape ended games to improve efficiency (?)
   - Host on netlify or simlar (?) 
      -> Scott said AWS
   - Add login for each user's preferences
   - Let user enter their local streams (?)
      - if so replace "NBCSP" with this...really NBCSP shouldn't be in the publicly available options
   - Display standings

Recently completed (since last push, so put in commit msg):
Added mongodb server
Made /preferences fit on one page

To do but it's specific:   
Delete (all) cookies
Add standings to db

WIWWO: 
7/21: trying to fix League.js re-rendering constantly
formatting db standings and otherwise converting it
now: standings.json to db
get rid of where jsons are made
League.js is fully db dependent
7/14: trying to get rid of server.js so want to replace the fetch to that with a fetch to database.js
7/13: I read thru all of server.js...think it makes sense/is doable to fully get rid of that and work directly w/ db
 Trying to get rid of all cookies except current and Want to read over all of server.js to get rid of 
      what I know I don't need

Probs can delete from server.js:
all cookies? cookieparser?

Deploying to web things:
Mapping out database things:
   1) READ from league db
   2a) if entry for current date UPDATE
   2b) if no entry for current date CREATE

Odds, ends, and reminders
   Using git:
   1. Make changes to code
   2. Commit
   3. Branch -> merge
   4. Compare and confirm merge/pull

   When using res (like updating cookies) must eventually send res for it to be updated

   When using mongodb from a different location need to configure IP

